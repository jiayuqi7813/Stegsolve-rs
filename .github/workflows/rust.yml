name: CI/CD Pipeline

on:
  push:
    tags:
      - 'v*'  # 监听以 'v' 开头的标签

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
    - uses: actions/checkout@v4

    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libgtk-4-dev \
          libgdk-pixbuf-2.0-dev \
          libglib2.0-dev \
          libpng-dev \
          libjpeg-dev \
          libtiff-dev \
          pkg-config \
          build-essential

    - name: Install system dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install pkg-config gtk4 gdk-pixbuf glib libpng jpeg libtiff

    - name: Install system dependencies (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        # 设置 MSVC 工具链
        rustup default stable-msvc

        # 安装 Chocolatey（如果尚未安装）
        Set-ExecutionPolicy Bypass -Scope Process -Force
        [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.SecurityProtocolType]::Tls12
        Invoke-Expression ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))

        # 安装 gvsbuild 依赖
        choco install -y python --version=3.9.0
        choco install -y git
        choco install -y pkgconfiglite

        # 安装 gvsbuild
        python -m pip install gvsbuild

        # 构建 GTK4（如果缓存未命中）
        if (-Not (Test-Path "C:\gtk-build")) {
            gvsbuild build gtk4
        }

        # 设置环境变量
        $gtkPath = "C:\gtk-build\gtk\x64\release"
        Add-Content -Path $env:GITHUB_ENV -Value "PKG_CONFIG_PATH=$gtkPath\lib\pkgconfig"
        Add-Content -Path $env:GITHUB_ENV -Value "PATH=$gtkPath\bin;$env:PATH"
        Add-Content -Path $env:GITHUB_ENV -Value "LIB=$gtkPath\lib;$env:LIB"

    - name: Cache GTK4 build
      id: gtk4-cache
      uses: actions/cache@v3
      with:
        path: C:\gtk-build
        key: gtk4-${{ runner.os }}-${{ hashFiles('**/Cargo.toml') }}
        restore-keys: |
          gtk4-${{ runner.os }}-

    - name: Build with Cargo (Release)
      run: cargo build --release

    - name: Run tests
      run: cargo test --verbose

    - name: Package artifacts
      run: |
        mkdir -p release
        # 复制二进制文件到 release 目录
        if [ "${{ matrix.os }}" == "windows-latest" ]; then
          cp target/release/stegsolve-rs.exe release/stegsolve-rs-${{ matrix.os }}.exe
        else
          cp target/release/stegsolve-rs release/stegsolve-rs-${{ matrix.os }}
        fi
        # 打包
        if [ "${{ matrix.os }}" == "windows-latest" ]; then
          zip -j release/stegsolve-rs-${{ matrix.os }}.zip release/stegsolve-rs-${{ matrix.os }}.exe
        else
          tar -czvf release/stegsolve-rs-${{ matrix.os }}.tar.gz -C release stegsolve-rs-${{ matrix.os }}
        fi

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./release/stegsolve-rs-${{ matrix.os }}.${{ matrix.os == 'windows-latest' && 'zip' || 'tar.gz' }}
        asset_name: stegsolve-rs-${{ matrix.os }}.${{ matrix.os == 'windows-latest' && 'zip' || 'tar.gz' }}
        asset_content_type: ${{ matrix.os == 'windows-latest' && 'application/zip' || 'application/gzip' }}