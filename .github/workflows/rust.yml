name: CI/CD Pipeline

on:
  push:
    branches:
      - main
    tags:
      - 'v*'

permissions:
  contents: write  # 为 GITHUB_TOKEN 设置 contents 的写权限

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - uses: actions/checkout@v4

      - name: Install system dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libgtk-4-dev \
            libgdk-pixbuf-2.0-dev \
            libglib2.0-dev \
            libpng-dev \
            libjpeg-dev \
            libtiff-dev \
            pkg-config \
            build-essential

      - name: Install system dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew install pkg-config gtk4 gdk-pixbuf glib libpng jpeg libtiff
          cargo install cargo-bundle

      - name: Setup Windows Rust toolchain
        if: matrix.os == 'windows-latest'
        run: |
          rustup default stable-msvc

      - name: Install Windows system dependencies
        if: matrix.os == 'windows-latest'
        shell: powershell
        run: |
          Set-ExecutionPolicy Bypass -Scope Process -Force
          [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.SecurityProtocolType]::Tls12
          Invoke-Expression ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))
          choco install -y python --version=3.9.0
          choco install -y git
          choco install -y pkgconfiglite
          python -m pip install gvsbuild

      - name: Cache GTK4 build
        if: matrix.os == 'windows-latest'
        uses: actions/cache@v3
        with:
          path: C:\gtk-build
          key: gtk4-${{ runner.os }}-${{ hashFiles('**/Cargo.toml') }}
          restore-keys: |
            gtk4-${{ runner.os }}-

      - name: Build GTK4 (only if not cached)
        if: matrix.os == 'windows-latest'
        shell: powershell
        run: |
          if (-Not (Test-Path "C:\gtk-build\gtk\x64\release")) {
              gvsbuild build gtk4
          }

      - name: Set GTK4 env (Windows)
        if: matrix.os == 'windows-latest'
        shell: powershell
        run: |
          $gtkPath = "C:\gtk-build\gtk\x64\release"
          echo "PKG_CONFIG_PATH=$gtkPath\lib\pkgconfig" >> $env:GITHUB_ENV
          echo "PATH=$gtkPath\bin;$env:PATH" >> $env:GITHUB_ENV
          echo "LIB=$gtkPath\lib;$env:LIB" >> $env:GITHUB_ENV

      - name: Build with mac_build.sh (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          chmod +x mac_build.sh
          ./mac_build.sh

      - name: Build with Cargo (Linux/Windows)
        if: matrix.os != 'macos-latest'
        run: cargo build --release

      - name: Run tests
        run: cargo test --verbose

      - name: Package artifacts (Windows)
        if: matrix.os == 'windows-latest'
        shell: powershell
        run: |
          mkdir release
          Copy-Item target\release\stegsolve-rs.exe release\stegsolve-rs-windows-latest.exe
          Compress-Archive -Path release\stegsolve-rs-windows-latest.exe -DestinationPath release\stegsolve-rs-windows-latest.zip

      - name: Package artifacts (Linux)
        if: matrix.os != 'windows-latest' && matrix.os != 'macos-latest'
        run: |
          mkdir -p release
          cp target/release/stegsolve-rs release/stegsolve-rs-${{ matrix.os }}
          tar -czvf release/stegsolve-rs-${{ matrix.os }}.tar.gz -C release stegsolve-rs-${{ matrix.os }}

      - name: Package artifacts (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          mkdir -p release
          cp -R target/release/bundle/osx/Stegsolve.app release/
          tar -czvf release/stegsolve-rs-macos-latest.tar.gz -C release Stegsolve.app

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os }}-release
          path: release

  release:
    needs: build
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v3
        with:
          path: ./artifacts

      - name: Publish Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            ./artifacts/**/*.tar.gz
            ./artifacts/**/*.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
