name: CI/CD Pipeline

on:
  push:
    branches:
      - main
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: macos-latest
            arch: x86_64
            target: macos
          - os: ubuntu-latest
            arch: x86_64
            target: linux
          - os: ubuntu-24.04-arm
            arch: arm64
            target: linux-arm

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true

      - name: Cache Cargo dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-${{ matrix.arch }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      # macOS 专属步骤
      - name: Install macOS dependencies
        if: matrix.target == 'macos'
        run: |
          brew install pkg-config
          rustup target add x86_64-pc-windows-gnu
          brew install mingw-w64

      # Linux x86_64 专属步骤
      - name: Install Linux x86_64 dependencies
        if: matrix.target == 'linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y libclang-dev libgtk-3-dev libxcb-render0-dev libxcb-shape0-dev libxcb-xfixes0-dev libxkbcommon-dev libssl-dev

      # ARM 专属步骤
      - name: Install ARM dependencies
        if: matrix.target == 'linux-arm'
        run: |
          sudo apt-get update
          sudo apt-get install -y libclang-dev libgtk-3-dev libxcb-render0-dev libxcb-shape0-dev libxcb-xfixes0-dev libxkbcommon-dev libssl-dev

      # 构建命令组
      - name: Build macOS binary
        if: matrix.target == 'macos'
        run: cargo build --release

      - name: Build Windows binary (macOS cross-compile)
        if: matrix.target == 'macos'
        run: cargo build --release --target x86_64-pc-windows-gnu

      - name: Build Linux x86_64
        if: matrix.target == 'linux'
        run: cargo build --release

      - name: Build Linux ARM64 (Native)
        if: matrix.target == 'linux-arm'
        run: cargo build --release

      # 统一打包逻辑
      - name: Package artifacts
        run: |
          mkdir -p release
          case "${{ matrix.target }}" in
            macos)
              cp target/release/stegsolve-rs release/stegsolve-rs-macos
              cp target/x86_64-pc-windows-gnu/release/stegsolve-rs.exe release/stegsolve-rs-windows.exe
              ;;
            linux)
              cp target/release/stegsolve-rs release/stegsolve-rs-linux-x86_64
              ;;
            linux-arm)
              cp target/release/stegsolve-rs release/stegsolve-rs-linux-aarch64
              ;;
          esac

          # 生成压缩包
          cd release
          tar -czvf binaries-${{ matrix.target }}.tar.gz ./*

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: binaries-${{ matrix.target }}
          path: release/binaries-${{ matrix.target }}.tar.gz

  release:
    needs: build
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Prepare release assets
        run: |
          mkdir -p release-assets
          find ./artifacts -name '*.tar.gz' -exec tar -xzvf {} -C release-assets \;

      - name: Publish Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            release-assets/stegsolve-rs-macos
            release-assets/stegsolve-rs-windows.exe
            release-assets/stegsolve-rs-linux-x86_64
            release-assets/stegsolve-rs-linux-aarch64
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}