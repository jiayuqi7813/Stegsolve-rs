name: CI/CD Pipeline

on:
  push:
    branches:
      - main  # 监听 main 分支的 push 事件
    tags:
      - 'v*'  # 监听以 'v' 开头的标签，例如 v1.0.0

jobs:
  build:
    # 多平台矩阵
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - uses: actions/checkout@v4

      - name: Install system dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libgtk-4-dev \
            libgdk-pixbuf-2.0-dev \
            libglib2.0-dev \
            libpng-dev \
            libjpeg-dev \
            libtiff-dev \
            pkg-config \
            build-essential

      - name: Install system dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew install pkg-config gtk4 gdk-pixbuf glib libpng jpeg libtiff

      - name: Install system dependencies (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          # 设置 MSVC 工具链
          rustup default stable-msvc

          # 安装 Chocolatey（如果尚未安装）
          Set-ExecutionPolicy Bypass -Scope Process -Force
          [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.SecurityProtocolType]::Tls12
          Invoke-Expression ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))

          # 安装 gvsbuild 依赖
          choco install -y python --version=3.9.0
          choco install -y git
          choco install -y pkgconfiglite

          # 安装 gvsbuild
          python -m pip install gvsbuild

          # 构建 GTK4（如果缓存未命中）
          if (-Not (Test-Path "C:\gtk-build")) {
              gvsbuild build gtk4
          }

          # 设置环境变量
          $gtkPath = "C:\gtk-build\gtk\x64\release"
          Add-Content -Path $env:GITHUB_ENV -Value "PKG_CONFIG_PATH=$gtkPath\lib\pkgconfig"
          Add-Content -Path $env:GITHUB_ENV -Value "PATH=$gtkPath\bin;$env:PATH"
          Add-Content -Path $env:GITHUB_ENV -Value "LIB=$gtkPath\lib;$env:LIB"

      - name: Cache GTK4 build
        id: gtk4-cache
        uses: actions/cache@v3
        with:
          path: C:\gtk-build
          key: gtk4-${{ runner.os }}-${{ hashFiles('**/Cargo.toml') }}
          restore-keys: |
            gtk4-${{ runner.os }}-

      - name: Build with Cargo (Release)
        run: cargo build --release

      - name: Run tests
        run: cargo test --verbose

      - name: Package artifacts
        if: startsWith(github.ref, 'refs/tags/v')
        run: |
          mkdir -p release
          # 复制二进制文件到 release 目录
          if [ "${{ matrix.os }}" == "windows-latest" ]; then
            cp target/release/stegsolve-rs.exe release/stegsolve-rs-${{ matrix.os }}.exe
            # 打包为 zip
            zip -j release/stegsolve-rs-${{ matrix.os }}.zip release/stegsolve-rs-${{ matrix.os }}.exe
          else
            cp target/release/stegsolve-rs release/stegsolve-rs-${{ matrix.os }}
            # 打包为 tar.gz
            tar -czvf release/stegsolve-rs-${{ matrix.os }}.tar.gz -C release stegsolve-rs-${{ matrix.os }}
          fi

      - name: Upload artifacts
        if: startsWith(github.ref, 'refs/tags/v')
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.os }}-release
          path: release
          retention-days: 3  # 可根据需要调整保留时间

  # 仅在打标签时执行，负责汇总所有构建产物并创建/更新 GitHub Release
  release:
    name: Upload to GitHub Release
    needs: build   # 等待所有 build 作业完成
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest

    steps:
      - name: Download Ubuntu artifacts
        uses: actions/download-artifact@v3
        with:
          name: ubuntu-latest-release
          path: ./ubuntu-latest-release

      - name: Download macOS artifacts
        uses: actions/download-artifact@v3
        with:
          name: macos-latest-release
          path: ./macos-latest-release

      - name: Download Windows artifacts
        uses: actions/download-artifact@v3
        with:
          name: windows-latest-release
          path: ./windows-latest-release

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ github.ref_name }}         # 例如 v1.0.0
          release_name: ${{ github.ref_name }}     # 发布名称
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # 上传 Ubuntu 构建产物
      - name: Upload Ubuntu Asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./ubuntu-latest-release/stegsolve-rs-ubuntu-latest.tar.gz
          asset_name: stegsolve-rs-ubuntu-latest.tar.gz
          asset_content_type: application/gzip

      # 上传 macOS 构建产物
      - name: Upload macOS Asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./macos-latest-release/stegsolve-rs-macos-latest.tar.gz
          asset_name: stegsolve-rs-macos-latest.tar.gz
          asset_content_type: application/gzip

      # 上传 Windows 构建产物
      - name: Upload Windows Asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./windows-latest-release/stegsolve-rs-windows-latest.zip
          asset_name: stegsolve-rs-windows-latest.zip
          asset_content_type: application/zip
